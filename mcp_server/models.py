# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:26:51+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class AnalyticsDataCountSwaggerModel(BaseModel):
    result: Optional[str] = None


class AnalyticsDataSwaggerModel(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id')


class BillingDetailsModel(BaseModel):
    building: str
    city: str
    companyName: str
    country: str
    email1: str
    email2: Optional[str] = None
    email3: Optional[str] = None
    firstName1: str
    firstName2: Optional[str] = None
    firstName3: Optional[str] = None
    lastName1: str
    lastName2: Optional[str] = None
    lastName3: Optional[str] = None
    postcode: str
    state: Optional[str] = None
    street: str
    taxNumber: Optional[str] = None


class DeletedGameModel(BaseModel):
    apiKey: Optional[str] = None
    name: Optional[str] = None


class ExperimentConfigModel(BaseModel):
    playerMongoQuery: Optional[str] = None
    playerQuery: Optional[str] = None
    variants: Optional[str] = None


class ExperimentModel(BaseModel):
    active: Optional[bool] = None
    changedFieldsAndInitialValues: Optional[Dict[str, Any]] = None
    complete: Optional[bool] = None
    config: Optional[ExperimentConfigModel] = None
    endDate: Optional[datetime] = None
    id: Optional[int] = None
    measurements: Optional[str] = None
    measurementsEsQuery: Optional[str] = None
    name: Optional[str] = None
    percentHash: Optional[str] = None
    publishedStages: Optional[List[str]] = None
    startDate: Optional[datetime] = None


class GameEndpointsModel(BaseModel):
    liveElasticSearch: Optional[str] = None
    liveNosql: Optional[str] = None
    previewElasticSearch: Optional[str] = None
    previewNosql: Optional[str] = None


class GameModel(BaseModel):
    field_id: Optional[str] = Field(None, alias='@id')
    name: Optional[str] = None


class GameRegionOptionDTO(BaseModel):
    regionCode: Optional[str] = None
    regionName: Optional[str] = None
    selected: Optional[bool] = None


class GameRegionOptionsDTO(BaseModel):
    locked: Optional[bool] = None
    options: Optional[List[GameRegionOptionDTO]] = None


class LogLevelSummaryModel(BaseModel):
    count: Optional[int] = None
    level: Optional[str] = None


class ManageItemSummary(BaseModel):
    name: Optional[str] = None
    shortCode: Optional[str] = None


class ManageQuery(BaseModel):
    esRules: Optional[str] = None
    name: Optional[str] = None
    qbRules: Optional[str] = None
    shortCode: Optional[str] = None


class ManageResult(BaseModel):
    message: Optional[str] = None


class ManageScreen(BaseModel):
    groups: Optional[List[str]] = None
    name: Optional[str] = None
    shortCode: Optional[str] = None
    template: Optional[str] = None


class ManageSnapshot(BaseModel):
    date: Optional[datetime] = None
    description: Optional[str] = None
    id: Optional[str] = None
    published: Optional[bool] = None


class ManageSnippet(BaseModel):
    groups: Optional[List[str]] = None
    name: Optional[str] = None
    script: Optional[str] = None
    scriptData: Optional[str] = None
    shortCode: Optional[str] = None
    template: Optional[str] = None


class MessageModel(BaseModel):
    message: Optional[str] = None


class Number(BaseModel):
    pass


class PushNotificationTestModel(BaseModel):
    customJson: Optional[str] = None
    messageId: Optional[str] = None
    pushId: Optional[str] = None
    subtitle: Optional[str] = None
    summary: Optional[str] = None
    title: Optional[str] = None


class PushNotificationTestSummaryModel(BaseModel):
    error: Optional[bool] = None
    outgoingMessageParts: Optional[Dict[str, str]] = None
    resultParts: Optional[Dict[str, str]] = None
    title: Optional[str] = None


class RegionResult(BaseModel):
    message: Optional[str] = None


class ChangeType(Enum):
    NOCHANGE = 'NOCHANGE'
    ADDED = 'ADDED'
    CHANGED = 'CHANGED'
    DELETED = 'DELETED'
    IGNORED = 'IGNORED'
    CHANGED_CODE_INVALID = 'CHANGED_CODE_INVALID'
    CHANGED_NAME_INVALID = 'CHANGED_NAME_INVALID'


class ScriptsDifferenceModel(BaseModel):
    bind: Optional[str] = None
    changeType: Optional[ChangeType] = None
    fileName: Optional[str] = None
    script1: Optional[str] = None
    script2: Optional[str] = None
    type: Optional[str] = None


class SegmentQueryFilterModel(BaseModel):
    key: Optional[str] = None
    name: Optional[str] = None
    options: Optional[List[Dict[str, Any]]] = None
    type: Optional[str] = None


class SnapshotCreationModel(BaseModel):
    description: Optional[str] = None


class SnapshotCreationSuccessModel(BaseModel):
    targetGameApiKey: Optional[str] = None


class SnapshotModel(BaseModel):
    created: Optional[datetime] = None
    createdBy: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    indexProgress: Optional[Dict[str, int]] = None
    published: Optional[bool] = None
    status: Optional[str] = None


class SnapshotScriptVersionModel(BaseModel):
    cloudCodeVersion: Optional[int] = None
    createdDate: Optional[datetime] = None
    description: Optional[str] = None
    id: Optional[str] = None
    live: Optional[bool] = None


class TestHarnessScenarioModel(BaseModel):
    scenarioJson: Optional[Dict[str, Any]] = None
    scenarioName: Optional[str] = None


class Stage(Enum):
    LIVE = 'LIVE'
    PREVIEW = 'PREVIEW'


class DataType(Enum):
    activeDevices = 'activeDevices'
    activeLocations = 'activeLocations'
    activeUsers = 'activeUsers'
    averageBandwidthPerUser = 'averageBandwidthPerUser'
    averageDauOverMau = 'averageDauOverMau'
    averageJsExecutionTime = 'averageJsExecutionTime'
    averageRequestsPerUser = 'averageRequestsPerUser'
    averageResponseTime = 'averageResponseTime'
    averageResponseTimePerType = 'averageResponseTimePerType'
    scriptLogLevelsCount = 'scriptLogLevelsCount'
    sessionAnalytic = 'sessionAnalytic'
    storagePerUser = 'storagePerUser'
    customAnalyticTotal = 'customAnalyticTotal'
    customAnalyticUser = 'customAnalyticUser'
    timedAnalyticTotal = 'timedAnalyticTotal'
    sessionAnalyticTotal = 'sessionAnalyticTotal'
    connectedUsers = 'connectedUsers'


class Precision(Enum):
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'
    MONTHLY = 'MONTHLY'


class Restv2GameApiKeyAdminAnalyticsGetResponse(
    RootModel[List[AnalyticsDataSwaggerModel]]
):
    root: List[AnalyticsDataSwaggerModel]


class QueryName(Enum):
    activeUsersNow = 'activeUsersNow'
    dailyActiveUsers = 'dailyActiveUsers'
    averageDailyActiveUsers = 'averageDailyActiveUsers'
    lastMonthlyActiveUsers = 'lastMonthlyActiveUsers'
    monthlyActiveUsers = 'monthlyActiveUsers'
    averageSessionDuration = 'averageSessionDuration'


class Restv2GameApiKeyAdminScriptsImportAcceptPostRequest(BaseModel):
    file: bytes = Field(..., description='file')


class Restv2GameApiKeyAdminScriptsImportPreviewPostRequest(BaseModel):
    file: bytes = Field(..., description='file')


class Restv2GameApiKeyAdminSnapshotsGetResponse(RootModel[List[SnapshotModel]]):
    root: List[SnapshotModel]


class Restv2GameApiKeyAdminSnapshotsPagePageGetResponse(RootModel[List[SnapshotModel]]):
    root: List[SnapshotModel]


class Restv2GameApiKeyAdminTestHarnessScenariosGetResponse(
    RootModel[List[TestHarnessScenarioModel]]
):
    root: List[TestHarnessScenarioModel]


class Restv2GameApiKeyManageExperimentsGetResponse(RootModel[List[ExperimentModel]]):
    root: List[ExperimentModel]


class Action(Enum):
    start = 'start'
    stop = 'stop'
    publish = 'publish'
    unpublish = 'unpublish'


class Restv2GameApiKeyManageQueriesGetResponse(RootModel[List[ManageItemSummary]]):
    root: List[ManageItemSummary]


class Restv2GameApiKeyManageScreensGetResponse(RootModel[List[ManageItemSummary]]):
    root: List[ManageItemSummary]


class Restv2GameApiKeyManageScreensExecutableGetResponse(
    RootModel[List[ManageItemSummary]]
):
    root: List[ManageItemSummary]


class Restv2GameApiKeyManageSnapshotsGetResponse(RootModel[List[ManageSnapshot]]):
    root: List[ManageSnapshot]


class Restv2GameApiKeyManageSnippetsGetResponse(RootModel[List[ManageItemSummary]]):
    root: List[ManageItemSummary]


class Restv2GamesGetResponse(RootModel[List[GameModel]]):
    root: List[GameModel]


class Restv2GamesDeletedGetResponse(RootModel[List[DeletedGameModel]]):
    root: List[DeletedGameModel]


class GameSummaryModel(BaseModel):
    logLevelData: Optional[List[Dict[str, Any]]] = None
    logLevelSummary: Optional[List[LogLevelSummaryModel]] = None
    message: Optional[str] = None


class PushNotificationTestSummaryListModel(BaseModel):
    summaries: Optional[List[PushNotificationTestSummaryModel]] = None


class ScriptsDifferenceListModel(BaseModel):
    differences: Optional[List[ScriptsDifferenceModel]] = None


class SegmentQueryFilterConfigModel(BaseModel):
    customFilters: Optional[List[SegmentQueryFilterModel]] = None
    hiddenFilters: Optional[List[str]] = None


class SegmentQueryFilterListModel(BaseModel):
    filters: Optional[List[SegmentQueryFilterModel]] = None


class SnapshotScriptVersionListModel(BaseModel):
    scriptVersions: Optional[List[SnapshotScriptVersionModel]] = None
