# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:26:51+00:00



import argparse
import json
import os
from datetime import date
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic
from fastapi import Path, Query, UploadFile

from models import (
    Action,
    AnalyticsDataCountSwaggerModel,
    BillingDetailsModel,
    DataType,
    ExperimentModel,
    GameEndpointsModel,
    GameRegionOptionsDTO,
    GameSummaryModel,
    ManageQuery,
    ManageResult,
    ManageScreen,
    ManageSnapshot,
    ManageSnippet,
    MessageModel,
    Precision,
    PushNotificationTestModel,
    PushNotificationTestSummaryListModel,
    QueryName,
    RegionResult,
    Restv2GameApiKeyAdminAnalyticsGetResponse,
    Restv2GameApiKeyAdminSnapshotsGetResponse,
    Restv2GameApiKeyAdminSnapshotsPagePageGetResponse,
    Restv2GameApiKeyAdminTestHarnessScenariosGetResponse,
    Restv2GameApiKeyManageExperimentsGetResponse,
    Restv2GameApiKeyManageQueriesGetResponse,
    Restv2GameApiKeyManageScreensExecutableGetResponse,
    Restv2GameApiKeyManageScreensGetResponse,
    Restv2GameApiKeyManageSnapshotsGetResponse,
    Restv2GameApiKeyManageSnippetsGetResponse,
    Restv2GamesDeletedGetResponse,
    Restv2GamesGetResponse,
    ScriptsDifferenceListModel,
    SegmentQueryFilterConfigModel,
    SegmentQueryFilterListModel,
    SnapshotCreationModel,
    SnapshotCreationSuccessModel,
    SnapshotModel,
    SnapshotScriptVersionListModel,
    Stage,
    TestHarnessScenarioModel,
)

app = MCPProxy(
    contact={'x-twitter': 'GameSparksltd'},
    description='The API to manage the GameSparks game details',
    license={'name': ' '},
    termsOfService='http://www.gamesparks.com/gamesparks-terms-of-use',
    title='GameSparks Game Details API',
    version='v2',
    servers=[{'url': '//config2.gamesparks.net'}],
)


@app.get('/restv2/game/regions', tags=['game_configuration_management'])
def get_region_options_using_g_e_t():
    """
    getRegionOptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/analytics',
    tags=[
        'analytics_data_retrieval',
        'query_configuration_management',
        'segment_filter_management',
    ],
)
def get_analytics_data_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    stage: Stage = ...,
    data_type: DataType = Query(..., alias='dataType'),
    precision: Precision = ...,
    start_date: date = Query(..., alias='startDate'),
    end_date: date = Query(..., alias='endDate'),
    keys: Optional[str] = None,
):
    """
    Returns the results of executed query defined by the parameters passed in
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/analytics/count',
    tags=[
        'analytics_data_retrieval',
        'segment_filter_management',
        'query_configuration_management',
    ],
)
def get_data_count_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    stage: Stage = ...,
    query_name: QueryName = Query(..., alias='queryName'),
):
    """
    Returns the count of executed query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/analytics/rollingRetention',
    tags=['analytics_data_retrieval', 'segment_filter_management'],
)
def get_retention_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'), stage: Stage = ...
):
    """
    Returns the percentage of user retention over the last 30 days
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/billingDetails',
    description=""" Retrieves the Billing Details. """,
    tags=['billing_details_management'],
)
def get_billing_details(api_key: str = Path(..., alias='apiKey')):
    """
    Retrieves the Billing Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/restv2/game/{apiKey}/admin/billingDetails',
    description=""" Updates the Billing Details. """,
    tags=['billing_details_management'],
)
def put_billing_details(
    api_key: str = Path(..., alias='apiKey'), body: BillingDetailsModel = ...
):
    """
    Updates the Billing Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/notifications/summary',
    tags=['analytics_data_retrieval', 'game_configuration_management'],
)
def get_game_summary_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    stage: Stage = ...,
    start_date: date = Query(..., alias='startDate'),
    end_date: date = Query(..., alias='endDate'),
):
    """
    getGameSummary
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/pushNotifications/test/amazon',
    tags=['push_notification_service_testing'],
)
def test_push_amazon_notifications_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: PushNotificationTestModel = ...
):
    """
    testPushAmazonNotifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/pushNotifications/test/apple/development',
    tags=['push_notification_service_testing'],
)
def test_push_apple_dev_notifications_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: PushNotificationTestModel = ...
):
    """
    testPushAppleDevNotifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/pushNotifications/test/apple/production',
    tags=['push_notification_service_testing'],
)
def test_push_apple_prod_notifications_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: PushNotificationTestModel = ...
):
    """
    testPushAppleProdNotifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/pushNotifications/test/google',
    tags=['push_notification_service_testing'],
)
def test_push_google_notifications_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: PushNotificationTestModel = ...
):
    """
    testPushGoogleNotifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windows8',
    tags=['push_notification_service_testing'],
)
def test_windows8_notifications_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: PushNotificationTestModel = ...
):
    """
    testWindows8Notifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windowsPhone8',
    tags=['push_notification_service_testing'],
)
def test_windows_phone8_notifications_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: PushNotificationTestModel = ...
):
    """
    testWindowsPhone8Notifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/pushNotifications/test/viber/integration',
    tags=['push_notification_service_testing'],
)
def test_viber_integration_notifications_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: PushNotificationTestModel = ...
):
    """
    testViberIntegrationNotifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/pushNotifications/test/viber/production',
    tags=['push_notification_service_testing'],
)
def test_viber_production_notifications_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: PushNotificationTestModel = ...
):
    """
    testViberProductionNotifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/scripts/differences/{snapshotId1}/{snapshotId2}',
    tags=['script_version_control', 'game_state_snapshot_management'],
)
def get_script_differences_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id1: str = Path(..., alias='snapshotId1'),
    snapshot_id2: str = Path(..., alias='snapshotId2'),
):
    """
    getScriptDifferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/scripts/export', tags=['data_transfer_operations']
)
def export_zip_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    exportZip
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/scripts/import/accept',
    tags=['data_transfer_operations'],
)
def import_accept_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: str = ..., file: UploadFile = ...
):
    """
    importAccept
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/scripts/import/preview',
    tags=['data_transfer_operations'],
)
def import_zip_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), file: UploadFile = ...
):
    """
    importZip
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/scripts/versions', tags=['script_version_control']
)
def get_script_versions_using_g_e_t_1(
    api_key: str = Path(..., alias='apiKey'),
    page_size: Optional[int] = Query(100, alias='pageSize'),
):
    """
    getScriptVersions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/scripts/versions/{page}',
    tags=['script_version_control'],
)
def get_script_versions_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    page: int = ...,
    page_size: Optional[int] = Query(100, alias='pageSize'),
):
    """
    getScriptVersions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/segmentQueryFilters',
    tags=['segment_filter_management', 'analytics_data_retrieval'],
)
def get_segment_query_filters_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    getSegmentQueryFilters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/segmentQueryFilters/config',
    tags=['segment_filter_management', 'analytics_data_retrieval'],
)
def get_segment_query_filters_config_using_g_e_t(
    api_key: str = Path(..., alias='apiKey')
):
    """
    getSegmentQueryFiltersConfig
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/restv2/game/{apiKey}/admin/segmentQueryFilters/config',
    tags=['segment_filter_management'],
)
def update_segment_query_filters_config_using_p_u_t(
    api_key: str = Path(..., alias='apiKey'), body: SegmentQueryFilterConfigModel = ...
):
    """
    updateSegmentQueryFiltersConfig
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/segmentQueryFilters/standardFilters',
    tags=['segment_filter_management', 'analytics_data_retrieval'],
)
def get_segment_query_standard_filters_using_g_e_t(
    api_key: str = Path(..., alias='apiKey')
):
    """
    getSegmentQueryStandardFilters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/snapshots', tags=['game_state_snapshot_management']
)
def get_snapshots_using_g_e_t_1(
    api_key: str = Path(..., alias='apiKey'),
    page_size: Optional[int] = Query(20, alias='pageSize'),
):
    """
    getSnapshots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/snapshots', tags=['game_state_snapshot_management']
)
def create_snapshots_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: SnapshotCreationModel = ...
):
    """
    createSnapshots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/snapshots/liveSnapshotId',
    tags=['game_state_snapshot_management'],
)
def get_live_snapshot_id_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    getLiveSnapshotId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/snapshots/page/{page}',
    tags=['game_state_snapshot_management', 'analytics_data_retrieval'],
)
def get_snapshots_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    page: int = ...,
    page_size: Optional[int] = Query(20, alias='pageSize'),
):
    """
    getSnapshots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/snapshots/revert/to/{snapshotId}',
    tags=['game_state_snapshot_management', 'script_version_control'],
)
def revert_to_snapshot_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
):
    """
    revertToSnapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}',
    tags=['game_state_snapshot_management'],
)
def delete_snapshot_using_d_e_l_e_t_e_1(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
):
    """
    deleteSnapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}',
    tags=['game_state_snapshot_management'],
)
def get_snapshot_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
):
    """
    getSnapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy',
    tags=['game_state_snapshot_management', 'game_configuration_management'],
)
def copy_snapshot_to_new_game_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
    include_game_config: Optional[bool] = Query(True, alias='includeGameConfig'),
    include_metadata: Optional[bool] = Query(True, alias='includeMetadata'),
    include_binaries: Optional[bool] = Query(True, alias='includeBinaries'),
    include_collaborators: Optional[bool] = Query(True, alias='includeCollaborators'),
):
    """
    copySnapshotToNewGame
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy/to/{targetApiKey}',
    tags=['game_state_snapshot_management', 'game_configuration_management'],
)
def copy_snapshot_to_existing_game_using_p_o_s_t_1(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
    target_api_key: str = Path(..., alias='targetApiKey'),
    include_game_config: Optional[bool] = Query(True, alias='includeGameConfig'),
    include_metadata: Optional[bool] = Query(True, alias='includeMetadata'),
    include_binaries: Optional[bool] = Query(True, alias='includeBinaries'),
    include_collaborators: Optional[bool] = Query(True, alias='includeCollaborators'),
):
    """
    copySnapshotToExistingGame
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/publish',
    tags=['game_state_snapshot_management'],
)
def publish_snapshot_using_p_o_s_t_1(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
):
    """
    publishSnapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/unpublish',
    tags=['game_state_snapshot_management'],
)
def unpublish_snapshot_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
):
    """
    unpublishSnapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/testHarness/scenarios',
    tags=['test_harness_scenario_administration'],
)
def get_test_harness_scenarios_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    getTestHarnessScenarios
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/admin/testHarness/scenarios',
    tags=['test_harness_scenario_administration'],
)
def create_test_harness_scenario_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: TestHarnessScenarioModel = ...
):
    """
    createTestHarnessScenario
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}',
    tags=['test_harness_scenario_administration'],
)
def delete_test_harness_scenario_using_d_e_l_e_t_e(
    api_key: str = Path(..., alias='apiKey'),
    scenario_name: str = Path(..., alias='scenarioName'),
):
    """
    deleteTestHarnessScenario
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}',
    tags=['test_harness_scenario_administration'],
)
def get_test_harness_scenario_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    scenario_name: str = Path(..., alias='scenarioName'),
):
    """
    getTestHarnessScenario
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}',
    tags=['test_harness_scenario_administration'],
)
def update_test_harness_scenario_using_p_u_t(
    api_key: str = Path(..., alias='apiKey'),
    scenario_name: str = Path(..., alias='scenarioName'),
    body: TestHarnessScenarioModel = ...,
):
    """
    updateTestHarnessScenario
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/config/~credentials/{credentialName}/resetSecret',
    tags=['removed_items_management'],
)
def update_credential_secret_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'),
    credential_name: str = Path(..., alias='credentialName'),
):
    """
    Resets the secret of a credential
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/endpoints',
    tags=['analytics_data_retrieval', 'game_configuration_management'],
)
def get_games_endpoints_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    getGamesEndpoints
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/manage/experiments',
    tags=['experimental_data_management', 'analytics_data_retrieval'],
)
def get_experiments_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    getExperiments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/manage/experiments', tags=['experimental_data_management']
)
def create_experiment_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: ExperimentModel = ...
):
    """
    createExperiment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/restv2/game/{apiKey}/manage/experiments/{id}',
    tags=['experimental_data_management'],
)
def delete_experiment_using_d_e_l_e_t_e(
    api_key: str = Path(..., alias='apiKey'), id: int = ...
):
    """
    deleteExperiment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/manage/experiments/{id}',
    tags=['experimental_data_management'],
)
def get_experiment_using_g_e_t(api_key: str = Path(..., alias='apiKey'), id: int = ...):
    """
    getExperiment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/restv2/game/{apiKey}/manage/experiments/{id}',
    tags=['experimental_data_management'],
)
def update_experiment_using_p_u_t(
    api_key: str = Path(..., alias='apiKey'), id: int = ..., body: ExperimentModel = ...
):
    """
    updateExperiment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/manage/experiments/{id}/{action}',
    tags=['experimental_data_management'],
)
def do_action_experiment_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), id: int = ..., action: Action = ...
):
    """
    doActionExperiment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/manage/queries',
    tags=['analytics_data_retrieval', 'query_configuration_management'],
)
def list_queries_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    listQueries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/manage/queries',
    tags=['query_configuration_management', 'analytics_data_retrieval'],
)
def create_query_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: ManageQuery = ...
):
    """
    createQuery
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/restv2/game/{apiKey}/manage/queries/{shortCode}',
    tags=['removed_items_management', 'query_configuration_management'],
)
def delete_query_using_d_e_l_e_t_e(
    api_key: str = Path(..., alias='apiKey'),
    short_code: str = Path(..., alias='shortCode'),
):
    """
    deleteQuery
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/manage/queries/{shortCode}',
    tags=[
        'analytics_data_retrieval',
        'segment_filter_management',
        'query_configuration_management',
    ],
)
def get_query_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    short_code: str = Path(..., alias='shortCode'),
):
    """
    getQuery
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/restv2/game/{apiKey}/manage/queries/{shortCode}',
    tags=['query_configuration_management'],
)
def update_query_using_p_u_t(
    api_key: str = Path(..., alias='apiKey'),
    short_code: str = Path(..., alias='shortCode'),
    body: ManageQuery = ...,
):
    """
    updateQuery
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/restv2/game/{apiKey}/manage/screens', tags=['application_screen_management'])
def list_screens_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    listScreens
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/manage/screens', tags=['application_screen_management']
)
def create_screen_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: ManageScreen = ...
):
    """
    createScreen
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/manage/screens/executable',
    tags=['application_screen_management'],
)
def list_executable_screens_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    listExecutableScreens
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/restv2/game/{apiKey}/manage/screens/{shortCode}',
    tags=['application_screen_management'],
)
def delete_screen_using_d_e_l_e_t_e(
    api_key: str = Path(..., alias='apiKey'),
    short_code: str = Path(..., alias='shortCode'),
):
    """
    deleteScreen
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/manage/screens/{shortCode}',
    tags=['application_screen_management'],
)
def get_screen_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    short_code: str = Path(..., alias='shortCode'),
):
    """
    getScreen
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/restv2/game/{apiKey}/manage/screens/{shortCode}',
    tags=['application_screen_management'],
)
def update_screen_using_p_u_t(
    api_key: str = Path(..., alias='apiKey'),
    short_code: str = Path(..., alias='shortCode'),
    body: ManageScreen = ...,
):
    """
    updateScreen
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/manage/snapshots',
    tags=['game_state_snapshot_management', 'script_version_control'],
)
def list_snapshots_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    listSnapshots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/manage/snapshots', tags=['game_state_snapshot_management']
)
def create_snapshot_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: SnapshotCreationModel = ...
):
    """
    createSnapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}',
    tags=['game_state_snapshot_management'],
)
def delete_snapshot_using_d_e_l_e_t_e(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
):
    """
    deleteSnapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/copy/to/{targetApiKey}',
    tags=['game_state_snapshot_management', 'data_transfer_operations'],
)
def copy_snapshot_to_existing_game_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
    target_api_key: str = Path(..., alias='targetApiKey'),
):
    """
    copySnapshotToExistingGame
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/publish',
    tags=['game_state_snapshot_management'],
)
def publish_snapshot_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
):
    """
    publishSnapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/revert',
    tags=['game_state_snapshot_management', 'script_version_control'],
)
def revert_snapshot_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'),
    snapshot_id: str = Path(..., alias='snapshotId'),
):
    """
    revertSnapshot
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/manage/snippets', tags=['code_snippet_repository_management']
)
def list_snippets_using_g_e_t(api_key: str = Path(..., alias='apiKey')):
    """
    listSnippets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/manage/snippets', tags=['code_snippet_repository_management']
)
def create_snippet_using_p_o_s_t(
    api_key: str = Path(..., alias='apiKey'), body: ManageSnippet = ...
):
    """
    createSnippet
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/restv2/game/{apiKey}/manage/snippets/{shortCode}',
    tags=['code_snippet_repository_management'],
)
def delete_snippet_using_d_e_l_e_t_e(
    api_key: str = Path(..., alias='apiKey'),
    short_code: str = Path(..., alias='shortCode'),
):
    """
    deleteSnippet
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restv2/game/{apiKey}/manage/snippets/{shortCode}',
    tags=['code_snippet_repository_management'],
)
def get_snippet_using_g_e_t(
    api_key: str = Path(..., alias='apiKey'),
    short_code: str = Path(..., alias='shortCode'),
):
    """
    getSnippet
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/restv2/game/{apiKey}/manage/snippets/{shortCode}',
    tags=['code_snippet_repository_management'],
)
def update_snippet_using_p_u_t(
    api_key: str = Path(..., alias='apiKey'),
    short_code: str = Path(..., alias='shortCode'),
    body: ManageSnippet = ...,
):
    """
    updateSnippet
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{apiKey}/restore',
    tags=['game_configuration_management', 'removed_items_management'],
)
def restore_deleted_game_using_p_o_s_t(api_key: str = Path(..., alias='apiKey')):
    """
    restoreDeletedGame
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restv2/game/{gameApiKey}/region/{regionCode}',
    tags=['game_configuration_management'],
)
def set_game_region_using_p_o_s_t(
    game_api_key: str = Path(..., alias='gameApiKey'),
    region_code: str = Path(..., alias='regionCode'),
):
    """
    setGameRegion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/restv2/game/{gameApiKey}/regions', tags=['game_configuration_management'])
def get_game_region_options_using_g_e_t(
    game_api_key: str = Path(..., alias='gameApiKey')
):
    """
    getGameRegionOptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/restv2/games', tags=['removed_items_management'])
def list_using_g_e_t():
    """
    list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/restv2/games/deleted', tags=['removed_items_management'])
def list_deleted_using_g_e_t():
    """
    listDeleted
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
